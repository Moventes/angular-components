{"version":3,"file":"mv-angular-components.umd.min.js","sources":["~/mv-angular-components/src/componentes/directives/phone-input/phone-input.directive.ts","~/mv-angular-components/src/componentes/directives/address-input/address-input.directive.ts","~/mv-angular-components/src/componentes/directives/error-display/error-display.directive.ts","../../../../common-components/dist/ts/src/componentes/pipes/iterator/iterator.pipe.ts","../../../../node_modules/src/util/root.ts","../../../../node_modules/src/util/isFunction.ts","../../../../node_modules/src/util/isArray.ts","../../../../node_modules/src/util/isObject.ts","../../../../node_modules/src/util/tryCatch.ts","../../../../node_modules/src/util/errorObject.ts","../../../../node_modules/src/util/UnsubscriptionError.ts","../../../../node_modules/src/Subscription.ts","../../../../node_modules/src/Observer.ts","../../../../node_modules/src/symbol/rxSubscriber.ts","../../../../node_modules/src/Subscriber.ts","../../../../node_modules/src/util/toSubscriber.ts","../../../../node_modules/src/symbol/observable.ts","../../../../node_modules/src/util/noop.ts","../../../../node_modules/src/util/pipe.ts","../../../../node_modules/src/Observable.ts","../../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../../node_modules/src/SubjectSubscription.ts","../../../../node_modules/src/Subject.ts","../../../../node_modules/src/operators/refCount.ts","../../../../node_modules/src/observable/ConnectableObservable.ts","../../../../node_modules/src/operators/multicast.ts","../../../../node_modules/src/operators/share.ts","../../../../node_modules/src/operators/map.ts","../../../../node_modules/src/observable/ScalarObservable.ts","../../../../node_modules/src/observable/EmptyObservable.ts","../../../../node_modules/src/util/isScheduler.ts","../../../../node_modules/src/observable/ArrayObservable.ts","../../../../node_modules/src/util/isArrayLike.ts","../../../../node_modules/src/util/isPromise.ts","../../../../node_modules/src/symbol/iterator.ts","../../../../node_modules/src/InnerSubscriber.ts","../../../../node_modules/src/util/subscribeToResult.ts","../../../../node_modules/src/OuterSubscriber.ts","../../../../node_modules/src/operators/mergeMap.ts","../../../../node_modules/src/util/identity.ts","../../../../node_modules/src/operators/mergeAll.ts","../../../../node_modules/src/observable/merge.ts","../../../../node_modules/src/operators/merge.ts","../../../../node_modules/src/operators/switchMap.ts","../../../../node_modules/src/operators/scan.ts","../../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../../node_modules/src/operators/takeLast.ts","../../../../node_modules/src/operators/defaultIfEmpty.ts","../../../../node_modules/src/operators/reduce.ts","../../../../node_modules/src/operators/toArray.ts","../../../../node_modules/src/operators/take.ts","../../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.loader.ts","../../../../node_modules/src/observable/of.ts","../../../../node_modules/src/observable/PromiseObservable.ts","../../../../node_modules/src/observable/IteratorObservable.ts","../../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../../node_modules/src/Notification.ts","../../../../node_modules/src/operators/observeOn.ts","../../../../node_modules/src/observable/FromObservable.ts","../../../../node_modules/src/observable/from.ts","../../../../node_modules/src/operators/concatAll.ts","../../../../node_modules/src/observable/concat.ts","../../../../node_modules/src/operators/concat.ts","../../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/missing-translation-handler.ts","../../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.compiler.ts","../../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/util.ts","../../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.parser.ts","../../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.store.ts","../../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.service.ts","../../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.directive.ts","../../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.pipe.ts","../../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/index.ts","../../../../common-components/dist/ts/src/componentes/pipes/value-from-enum/value-from-enum.pipe.ts","../../../../common-components/dist/ts/src/componentes/componentes.module.ts","~/mv-angular-components/src/componentes/componentes.module.ts"],"sourcesContent":["import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Directive, forwardRef, HostListener, ElementRef, Renderer2 } from '@angular/core';\n\nimport * as libPhoneNumber from 'google-libphonenumber';\n/**\n * Provides utils for phone numbers\n */\nconst PhoneNumberUtil = libPhoneNumber.PhoneNumberUtil;\n/**\n * Provides the differents format used by Google's libphonenumber\n */\nconst PhoneNumberFormat = libPhoneNumber.PhoneNumberFormat;\n/**\n * This directive aims to provide a way to display a national phone number while you're typing\n * but will return an international (E164) phone number.\n * It's based on google-libphonenumber.\n * \n * \\@example \n * // template driven\n * <input type=\"text\" [(ngModel)]=\"phone1\" name=\"phone1\" required minlength=\"12\" maxlength=\"12\" mvPhoneInput>\n * // model driven\n * <input formControlName=\"phone2\" mvPhoneInput>\n */\nexport class PhoneInputDirective implements ControlValueAccessor {\n/**\n * Instance of the Google Phonenumber utils\n */\nprivate phoneUtil = PhoneNumberUtil.getInstance();\n/**\n * Phone number object in google format\n */\nprivate number: any;\n/**\n * Listener that will call format function on each input in the host.\n * \n * @param {?} value the value typed in the host input\n * @return {?}\n */\ninput(value) {\n    this.formatNumber(value);\n  }\n/**\n * Directive constructor\n * @param {?} element {ElementRef} Provides the parent element used to host the autocomplete\n * @param {?} renderer {Renderer2} Angular provider which aims to impact value on the DOM\n */\nconstructor(private element: ElementRef,\nprivate renderer: Renderer2) { }\n/**\n * Parses the string from the input to a phone number object in google format.\n * Then uses this object to generate national and international numbers.\n * Propagates the international number to the model and displays the national phone number.\n * \n * @param {?} val {string} Value from the input\n * @return {?}\n */\nprivate formatNumber(val: string) {\n    const /** @type {?} */ formattedNumber: { [k: string]: any } = {};\n    try {\n      this.number = this.phoneUtil.parse(val, 'FR');\n      formattedNumber.national = this.phoneUtil.format(this.number, PhoneNumberFormat.NATIONAL);\n      formattedNumber.international = this.phoneUtil.format(this.number, PhoneNumberFormat.E164);\n    } catch ( /** @type {?} */e) {\n      formattedNumber.national = val;\n      formattedNumber.international = null;\n    }\n    this.propagateChange(formattedNumber.international);\n    this.renderer.setProperty(this.element.nativeElement, 'value', formattedNumber.national);\n  }\n/**\n * This method is part of ControlValueAccessor interface.\n * Its role is to set value from the model to the DOM\n * \n * @param {?} value Value given from the model\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.formatNumber(value);\n  }\n/**\n * This method is part of ControlValueAccessor interface.\n * Its role is to set the function that will propagate changes from the DOM to the model.\n * \n * @param {?} fn {function} Angular internal function\n * @return {?}\n */\nregisterOnChange(fn) {\n    this.propagateChange = fn;\n  }\n/**\n * This method is part of ControlValueAccessor interface.\n * Not used here\n * @return {?}\n */\nregisterOnTouched(): void { }\n/**\n * Container for the propagation function.\n */\npropagateChange = (_: any) => { };\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mvPhoneInput]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => PhoneInputDirective),\n      multi: true\n    }\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'input': [{ type: HostListener, args: ['input', ['$event.target.value'], ] },],\n};\n}\n\nfunction PhoneInputDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPhoneInputDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPhoneInputDirective.ctorParameters;\n/** @type {?} */\nPhoneInputDirective.propDecorators;\n/**\n * Instance of the Google Phonenumber utils\n * @type {?}\n */\nPhoneInputDirective.prototype.phoneUtil;\n/**\n * Phone number object in google format\n * @type {?}\n */\nPhoneInputDirective.prototype.number;\n/**\n * Container for the propagation function.\n * @type {?}\n */\nPhoneInputDirective.prototype.propagateChange;\n/** @type {?} */\nPhoneInputDirective.prototype.element;\n/** @type {?} */\nPhoneInputDirective.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, forwardRef, ElementRef, Renderer2, HostListener, NgZone } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { Address, AddressDetails } from 'mv-common-components';\n\n/**\n * Google declaration provides access to Google maps api\n */\ndeclare var google: any;\n/**\n * This directive uses Google Maps to get a list of places matching the value of the parent container.\n * When a proposition is selected, the directive returns an object of type {\\@link Address}.\n * \n * \\@example \n * <h2>Template driven</h2>\n *   <form name=\"templateForm\">\n *     <label>\n *       Address\n *       <input type=\"text\" [(ngModel)]=\"address1\" name=\"address1\" required mvAddressInput>\n *     </label>\n *   </form>\n * <h2>Model driven driven</h2>\n * <form [formGroup]=\"form\">\n *   <label>\n *     Address\n *     <input formControlName=\"address2\" mvAddressInput>\n *   </label>\n * </form>\n */\nexport class AddressInputDirective implements ControlValueAccessor {\n/**\n * Google provided autocomplete service\n */\nprivate autocomplete: any;\n/**\n * Displayed address\n */\nprivate _address: string;\n/**\n * Sets the displayed address.\n * Propagates the address object to the model.\n * @param {?} newAddress\n * @return {?}\n */\nset address(newAddress: Address) {\n    this._address = newAddress.formattedAddress ? newAddress.formattedAddress : 'no formatted address';\n    this.renderer.setProperty(this.element.nativeElement, 'value', this._address);\n    this.onChange(newAddress);\n  }\n/**\n * Directive constructor\n * @param {?} element {ElementRef} Provides the parent element used to host the autocomplete\n * @param {?} renderer {Renderer2} Angular provider which aims to impact value on the DOM\n * @param {?} ngZone {NgZone} Angular provider which helps running Google's function in Angular zone\n */\nconstructor(private element: ElementRef,\nprivate renderer: Renderer2,\nprivate ngZone: NgZone) {\n    this.autocomplete = new google.maps.places.Autocomplete(\n      (this.element.nativeElement),\n      { types: ['geocode'] }\n    );\n    this.autocomplete.addListener('place_changed', () => {\n      this.ngZone.run(() => {\n        this.selectAddress();\n      });\n    });\n  }\n/**\n * Called when selecting a proposition.\n * Gets the place details from google autocomplete and format them into an address object.\n * Sets the address with this object.\n * @return {?}\n */\nprivate selectAddress() {\n    const /** @type {?} */ place: google.maps.GeocoderResult = this.autocomplete.getPlace();\n    const /** @type {?} */ addressValue: any = {};\n    const /** @type {?} */ addressDetails: any = {};\n\n    for (const /** @type {?} */ component of place.address_components) {\n      if (component.types[0] === 'street_number') {\n        addressDetails.streetNumber = component.long_name;\n      } else if (component.types[0] === 'route') {\n        addressDetails.route = component.long_name;\n      } else if (component.types[0] === 'postal_code') {\n        addressDetails.postalCode = component.long_name;\n      } else if (component.types[0] === 'locality') {\n        addressDetails.city = component.long_name;\n      } else if (component.types[0] === 'country') {\n        addressDetails.country = component.long_name;\n      }\n    }\n\n    addressValue.latitude = place.geometry.location.lat();\n    addressValue.longitude = place.geometry.location.lng();\n    addressValue.formattedAddress = place.formatted_address;\n    addressValue.googlePlaceId = place.place_id;\n    addressValue.addressDetails = addressDetails;\n\n    this.address = addressValue;\n  }\n/**\n * This method is part of ControlValueAccessor interface.\n * Its role is to set value from the model to the DOM\n * \n * @param {?} value Value given from the model\n * @return {?}\n */\nwriteValue(value: Address): void {\n    if (value) {\n      this.renderer.setProperty(this.element.nativeElement, 'value', value.formattedAddress ? value.formattedAddress : '');\n      this.address = value;\n    } else {\n      this.renderer.setProperty(this.element.nativeElement, 'value', '');\n    }\n  }\n/**\n * This method is part of ControlValueAccessor interface.\n * Its role is to set the function that will propagate changes from the DOM to the model.\n * \n * @param {?} fn {function} Angular internal function\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * This method is part of ControlValueAccessor interface.\n * Not used here\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void { }\n/**\n * Container for the propagation function.\n * @param {?} _\n * @return {?}\n */\nonChange(_: any) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mvAddressInput]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddressInputDirective),\n      multi: true\n    }\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n];\n}\n\nfunction AddressInputDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAddressInputDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAddressInputDirective.ctorParameters;\n/**\n * Google provided autocomplete service\n * @type {?}\n */\nAddressInputDirective.prototype.autocomplete;\n/**\n * Displayed address\n * @type {?}\n */\nAddressInputDirective.prototype._address;\n/** @type {?} */\nAddressInputDirective.prototype.element;\n/** @type {?} */\nAddressInputDirective.prototype.renderer;\n/** @type {?} */\nAddressInputDirective.prototype.ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef, Renderer2 } from '@angular/core';\nimport { ControlContainer } from '@angular/forms';\nimport { OnInit, OnDestroy } from '@angular/core';\n/**\n * This structural directive provides a way to display errors from a control or from the full form.\n * It must be placed on an element inside a form (template or model driven either).\n * this element will be repeaded for each error in the control/form.\n * \n * \\@example \n * <h2>Template driven</h2>\n * <form name=\"templateForm\">\n *   <label>\n *     Address\n *     <input type=\"text\" [(ngModel)]=\"address1\" name=\"address1\" required mvAddressInput>\n *   </label>\n *   <p>Errors : </p>\n *   <p *mvErrorDisplay=\"let error\">{{ error | translate }}</p>\n * </form>\n * <h2>Model driven driven</h2>\n * <form [formGroup]=\"form\">\n *   <label>\n *     Address\n *     <input formControlName=\"address2\" mvAddressInput>\n *   </label>\n *   <p>model value : {{ form.get('address2').value | json }}</p>\n *   <p>Errors : </p>\n *   <p *mvErrorDisplay=\"'address2'; let error\">{{ error | translate }}</p>\n * </form>\n */\nexport class ErrorDisplayDirective implements OnInit, OnDestroy {\n/**\n * The control which errors are requested\n */\nprivate target: string;\n/**\n * True if errors already displayed\n */\nprivate hasView = false;\n/**\n * Subscription to the changes in the control or form value\n */\nprivate subscription;\n/**\n * Sets the target with the string provided to the directive\n * @param {?} target\n * @return {?}\n */\nset mvErrorDisplay(target) {\n    if (target) {\n      this.target = target;\n    }\n  }\n/**\n * Directive constructor\n * @param {?} templateRef {TemplateRef<any>} Provides the tag containing the directive\n * @param {?} viewContainer {ViewContainerRef} Provides the DOM element that will contain the errors\n * @param {?} controlContainer {ControlContainer} Provides the  form inside of which the directive is provided\n * @param {?} renderer {Renderer2} Angular provider which aims to impact value on the DOM\n */\nconstructor(\nprivate templateRef: TemplateRef<any>,\nprivate viewContainer: ViewContainerRef,\nprivate controlContainer: ControlContainer,\nprivate renderer: Renderer2\n  ) { }\n/**\n * @inheritDoc\n * @return {?}\n */\nngOnInit() {\n    if (!this.target) {\n      this.subscription = this.controlContainer.valueChanges.subscribe(() => {\n        this.toggleVisibility(this.controlContainer);\n      });\n    } else {\n      this.subscription = this.controlContainer.control.get(this.target).valueChanges.subscribe(() => {\n        this.toggleVisibility(this.controlContainer.control.get(this.target));\n      });\n    }\n  }\n/**\n * @inheritDoc\n * @return {?}\n */\nngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n/**\n * Toggle the visibility of the errors list\n * @param {?} target the control or the form observed\n * @return {?}\n */\nprivate toggleVisibility(target) {\n    if (!target.valid && !this.hasView) {\n      this.updateErrorList(target);\n      this.hasView = true;\n    } else if (!target.valid) {\n      this.updateErrorList(target);\n    } else if (target.valid && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n/**\n * Creates and updates the DOM with the errors or empties it.\n * @param {?} target the control or the form observed\n * @return {?}\n */\nprivate updateErrorList(target) {\n    this.viewContainer.clear();\n    if (this.target) {\n      // tslint:disable-next-line:forin\n      for (const /** @type {?} */ error in target.errors) {\n        const /** @type {?} */ embeddedView = this.viewContainer.createEmbeddedView(\n          this.templateRef,\n          { $implicit: 'ERROR.' + this.target.toUpperCase() + '.' + error.toUpperCase() }\n        );\n      }\n    } else {\n      // tslint:disable-next-line:forin\n      for (const /** @type {?} */ control in target.control.controls) {\n        // tslint:disable-next-line:forin\n        for (const /** @type {?} */ error in target.control.get(control).errors) {\n          const /** @type {?} */ embeddedView = this.viewContainer.createEmbeddedView(\n            this.templateRef,\n            { $implicit: 'ERROR.' + control.toUpperCase() + '.' + error.toUpperCase() }\n          );\n        }\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mvErrorDisplay]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: ControlContainer, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mvErrorDisplay': [{ type: Input },],\n};\n}\n\nfunction ErrorDisplayDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nErrorDisplayDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nErrorDisplayDirective.ctorParameters;\n/** @type {?} */\nErrorDisplayDirective.propDecorators;\n/**\n * The control which errors are requested\n * @type {?}\n */\nErrorDisplayDirective.prototype.target;\n/**\n * True if errors already displayed\n * @type {?}\n */\nErrorDisplayDirective.prototype.hasView;\n/**\n * Subscription to the changes in the control or form value\n * @type {?}\n */\nErrorDisplayDirective.prototype.subscription;\n/** @type {?} */\nErrorDisplayDirective.prototype.templateRef;\n/** @type {?} */\nErrorDisplayDirective.prototype.viewContainer;\n/** @type {?} */\nErrorDisplayDirective.prototype.controlContainer;\n/** @type {?} */\nErrorDisplayDirective.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Observable } from 'rxjs/Observable';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { AsyncPipe } from '@angular/common';\n/**\n * This pipe extends the AsyncPipe.\n * It takes an object, an enum or an observable as an input and returns an array.\n * The array is a list of the different objects in case of an observable.\n * The array is a list of objects {key: key, value: value} in case of an object or an enum.\n */\nexport class IteratorPipe extends AsyncPipe implements PipeTransform {\n/**\n * Method returning the array from in object\n * @param {?} object the object to transform\n * \n * @return {?} list The array build from the object\n */\ntransform(object: any): any {\n    if (object instanceof Observable) {\n      return super.transform(object);\n    }\n    const /** @type {?} */ list = [];\n    // tslint:disable-next-line:forin\n    for (const /** @type {?} */ key in object) {\n      list.push({ key: key, value: object[key] });\n    }\n    return list;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'mvIterator'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction IteratorPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nIteratorPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIteratorPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { merge as mergeStatic } from '../observable/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import {Observable} from \"rxjs/Observable\";\nimport {Injectable} from \"@angular/core\";\nimport {of} from \"rxjs/observable/of\";\n\nexport abstract class TranslateLoader {\n    abstract getTranslation(lang: string): Observable<any>;\n}\n\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n@Injectable()\nexport class TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang: string): Observable<any> {\n        return of({});\n    }\n}\n","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import {TranslateService} from \"./translate.service\";\nimport {Injectable} from \"@angular/core\";\n\nexport interface MissingTranslationHandlerParams {\n    /**\n     * the key that's missing in translation files\n     *\n     * @type {string}\n     */\n    key: string;\n\n    /**\n     * an instance of the service that was unable to translate the key.\n     *\n     * @type {TranslateService}\n     */\n    translateService: TranslateService;\n\n    /**\n     * interpolation params that were passed along for translating the given key.\n     *\n     * @type {Object}\n     */\n    interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n    /**\n     * A function that handles missing translations.\n     *\n     * @abstract\n     * @param {MissingTranslationHandlerParams} params context for resolving a missing translation\n     * @returns {any} a value or an observable\n     * If it returns a value, then this value is used.\n     * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n     * If it doesn't return then the key will be used as a value\n     */\n    abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n    handle(params: MissingTranslationHandlerParams): string {\n        return params.key;\n    }\n}\n","import {Injectable} from \"@angular/core\";\n\nexport abstract class TranslateCompiler {\n    abstract compile(value: string, lang: string): string | Function;\n    abstract compileTranslations(translations: any, lang: string): any;\n}\n\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n@Injectable()\nexport class TranslateFakeCompiler extends TranslateCompiler {\n    compile(value: string, lang: string): string | Function {\n        return value;\n    }\n\n    compileTranslations(translations: any, lang: string): any {\n        return translations;\n    }\n}\n","/* tslint:disable */\n/**\n * @name equals\n *\n * @description\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {*} o1 Object or value to compare.\n * @param {*} o2 Object or value to compare.\n * @returns {boolean} True if arguments are equal.\n */\nexport function equals(o1: any, o2: any): boolean {\n    if (o1 === o2) return true;\n    if (o1 === null || o2 === null) return false;\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n    let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2)) return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key])) return false;\n                }\n                return true;\n            }\n        } else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/* tslint:enable */\n\nexport function isDefined(value: any): boolean {\n    return typeof value !== 'undefined' && value !== null;\n}\n\nexport function isObject(item: any): boolean {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target: any, source: any): any {\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((key: any) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                } else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            } else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n","import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n    /**\n     * Interpolates a string to replace parameters\n     * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n     * @param expr\n     * @param params\n     * @returns {string}\n     */\n    abstract interpolate(expr: string | Function, params?: any): string;\n\n    /**\n     * Gets a value from an object by composed key\n     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n     * @param target\n     * @param key\n     * @returns {string}\n     */\n    abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n    templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n    public interpolate(expr: string | Function, params?: any): string {\n        let result: string;\n\n        if(typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        } else if(typeof expr === 'function') {\n            result =  this.interpolateFunction(expr, params);\n        } else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = expr as string;\n        }\n\n        return result;\n    }\n\n    getValue(target: any, key: string): any {\n        let keys = key.split('.');\n        key = '';\n        do {\n            key += keys.shift();\n            if(isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            } else if(!keys.length) {\n                target = undefined;\n            } else {\n                key += '.';\n            }\n        } while(keys.length);\n\n        return target;\n    }\n\n    private interpolateFunction(fn: Function, params?: any) {\n        return fn(params);\n    }\n\n    private interpolateString(expr: string, params?: any) {\n        if (!params) {\n            return expr;\n        }\n\n        return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n            let r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        });\n    }\n}\n","import {EventEmitter} from \"@angular/core\";\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\n\nexport class TranslateStore {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    public defaultLang: string;\n\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    public currentLang: string = this.defaultLang;\n\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n    public translations: any = {};\n\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n    public langs: Array<string> = [];\n\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n    public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n    public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n    public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n","import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Observer} from \"rxjs/Observer\";\nimport {concat} from \"rxjs/operators/concat\";\nimport {share} from \"rxjs/operators/share\";\nimport {map} from \"rxjs/operators/map\";\nimport {merge} from \"rxjs/operators/merge\";\nimport {switchMap} from \"rxjs/operators/switchMap\";\nimport {toArray} from \"rxjs/operators/toArray\";\nimport {take} from \"rxjs/operators/take\";\nimport {of} from \"rxjs/observable/of\";\nimport {\n  MissingTranslationHandler,\n  MissingTranslationHandlerParams\n} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n    translations: any;\n    lang: string;\n}\n\nexport interface LangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\ndeclare interface Window {\n    navigator: any;\n}\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n    private loadingTranslations: Observable<any>;\n    private pending: boolean = false;\n    private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n    private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n    private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n    private _defaultLang: string;\n    private _currentLang: string;\n    private _langs: Array<string> = [];\n    private _translations: any = {};\n    private _translationRequests: any  = {};\n\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n    get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n    get onLangChange(): EventEmitter<LangChangeEvent> {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    get defaultLang(): string {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n\n    set defaultLang(defaultLang: string) {\n        if(this.isolate) {\n            this._defaultLang = defaultLang;\n        } else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    get currentLang(): string {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n\n    set currentLang(currentLang: string) {\n        if(this.isolate) {\n            this._currentLang = currentLang;\n        } else {\n            this.store.currentLang = currentLang;\n        }\n    }\n\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n    get langs(): string[] {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n\n    set langs(langs: string[]) {\n        if(this.isolate) {\n            this._langs = langs;\n        } else {\n            this.store.langs = langs;\n        }\n    }\n\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n    get translations(): any {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n\n    set translations(translations: any) {\n        if(this.isolate) {\n            this._translations = translations;\n        } else {\n            this.store.translations = translations;\n        }\n    }\n\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param isolate whether this service should use the store or not\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     */\n    constructor(public store: TranslateStore,\n                public currentLoader: TranslateLoader,\n                public compiler: TranslateCompiler,\n                public parser: TranslateParser,\n                public missingTranslationHandler: MissingTranslationHandler,\n                @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n                @Inject(USE_STORE) private isolate: boolean = false) {\n    }\n\n    /**\n     * Sets the default language to use as a fallback\n     * @param lang\n     */\n    public setDefaultLang(lang: string): void {\n        if(lang === this.defaultLang) {\n            return;\n        }\n\n        let pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if(!this.defaultLang) {\n                this.defaultLang = lang;\n            }\n\n            pending.pipe(take(1))\n                .subscribe((res: any) => {\n                    this.changeDefaultLang(lang);\n                });\n        } else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n\n    /**\n     * Gets the default language used\n     * @returns string\n     */\n    public getDefaultLang(): string {\n        return this.defaultLang;\n    }\n\n    /**\n     * Changes the lang currently used\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    public use(lang: string): Observable<any> {\n        // don't change the language if the language given is already selected\n        if(lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n\n        let pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if(!this.currentLang) {\n                this.currentLang = lang;\n            }\n\n            pending.pipe(take(1))\n                .subscribe((res: any) => {\n                    this.changeLang(lang);\n                });\n\n            return pending;\n        } else { // we have this language, return an Observable\n            this.changeLang(lang);\n\n            return of(this.translations[lang]);\n        }\n    }\n\n    /**\n     * Retrieves the given translations\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    private retrieveTranslations(lang: string): Observable<any> {\n        let pending: Observable<any>;\n\n        // if this language is unavailable, ask for it\n        if(typeof this.translations[lang] === \"undefined\") {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n\n        return pending;\n    }\n\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    public getTranslation(lang: string): Observable<any> {\n        this.pending = true;\n        this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n\n        this.loadingTranslations.pipe(take(1))\n          .subscribe((res: Object) => {\n                this.translations[lang] = this.compiler.compileTranslations(res, lang);\n                this.updateLangs();\n                this.pending = false;\n            }, (err: any) => {\n                this.pending = false;\n            });\n\n        return this.loadingTranslations;\n    }\n\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param lang\n     * @param translations\n     * @param shouldMerge\n     */\n    public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if(shouldMerge && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        } else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Returns an array of currently available langs\n     * @returns {any}\n     */\n    public getLangs(): Array<string> {\n        return this.langs;\n    }\n\n    /**\n     * @param langs\n     * Add available langs\n     */\n    public addLangs(langs: Array<string>): void {\n        langs.forEach((lang: string) => {\n            if(this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        });\n    }\n\n    /**\n     * Update the list of available langs\n     */\n    private updateLangs(): void {\n        this.addLangs(Object.keys(this.translations));\n    }\n\n    /**\n     * Returns the parsed result of the translations\n     * @param translations\n     * @param key\n     * @param interpolateParams\n     * @returns {any}\n     */\n    public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n        let res: string | Observable<string>;\n\n        if(key instanceof Array) {\n            let result: any = {},\n                observables: boolean = false;\n            for(let k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if(typeof result[k].subscribe === \"function\") {\n                    observables = true;\n                }\n            }\n            if(observables) {\n                let mergedObs: Observable<string>;\n                for(let k of key) {\n                    let obs = typeof result[k].subscribe === \"function\" ? result[k] : of(result[k] as string);\n                    if(typeof mergedObs === \"undefined\") {\n                        mergedObs = obs;\n                    } else {\n                        mergedObs = mergedObs.pipe(merge(obs));\n                    }\n                }\n                return mergedObs.pipe(\n                  toArray(),\n                  map((arr: Array<string>) => {\n                    let obj: any = {};\n                    arr.forEach((value: string, index: number) => {\n                      obj[key[index]] = value;\n                    });\n                    return obj;\n                  })\n                );\n            }\n            return result;\n        }\n\n        if(translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\") {\n            let params: MissingTranslationHandlerParams = {key, translateService: this};\n            if(typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n\n        return typeof res !== \"undefined\" ? res : key;\n    }\n\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param key\n     * @param interpolateParams\n     * @returns {any} the translated key, or an object of translated keys\n     */\n    public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if(this.pending) {\n            return Observable.create((observer: Observer<string>) => {\n                let onComplete = (res: string) => {\n                    observer.next(res);\n                    observer.complete();\n                };\n                let onError = (err: any) => {\n                    observer.error(err);\n                };\n                this.loadingTranslations.subscribe((res: any) => {\n                    res = this.getParsedResult(this.compiler.compileTranslations(res, this.currentLang), key, interpolateParams);\n                    if(typeof res.subscribe === \"function\") {\n                        res.subscribe(onComplete, onError);\n                    } else {\n                        onComplete(res);\n                    }\n                }, onError);\n            });\n        } else {\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            if(typeof res.subscribe === \"function\") {\n                return res;\n            } else {\n                return of(res);\n            }\n        }\n    }\n\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param key\n     * @param interpolateParams\n     * @returns {any} A stream of the translated key, or an object of translated keys\n     */\n    public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        return this\n          .get(key, interpolateParams)\n          .pipe(\n            concat(this.onLangChange.pipe(\n              switchMap((event: LangChangeEvent) => {\n                const res = this.getParsedResult(event.translations, key, interpolateParams);\n                if (typeof res.subscribe === \"function\") {\n                  return res;\n                } else {\n                  return of(res);\n                }\n              })\n            ))\n          );\n    }\n\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param key\n     * @param interpolateParams\n     * @returns {string}\n     */\n    public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if(typeof res.subscribe !== \"undefined\") {\n            if(key instanceof Array) {\n                let obj: any = {};\n                key.forEach((value: string, index: number) => {\n                    obj[key[index]] = key[index];\n                });\n                return obj;\n            }\n            return key;\n        } else {\n            return res;\n        }\n    }\n\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param key\n     * @param value\n     * @param lang\n     */\n    public set(key: string, value: string, lang: string = this.currentLang): void {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Changes the current lang\n     * @param lang\n     */\n    private changeLang(lang: string): void {\n        this.currentLang = lang;\n        this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n        // if there is no default lang, use the one that we just set\n        if(!this.defaultLang) {\n            this.changeDefaultLang(lang);\n        }\n    }\n\n    /**\n     * Changes the default lang\n     * @param lang\n     */\n    private changeDefaultLang(lang: string): void {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Allows to reload the lang file from the file\n     * @param lang\n     * @returns {Observable<any>}\n     */\n    public reloadLang(lang: string): Observable<any> {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n\n    /**\n     * Deletes inner translation\n     * @param lang\n     */\n    public resetLang(lang: string): void {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     *\n     * @returns string\n     */\n    public getBrowserLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        if(browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n\n        if(browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n\n        return browserLang;\n    }\n\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     *\n     * @returns string\n     */\n    public getBrowserCultureLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        return browserCultureLang;\n    }\n}\n","import {Directive, ElementRef, AfterViewChecked, Input, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {equals, isDefined} from './util';\nimport {TranslateService, LangChangeEvent} from './translate.service';\nimport {TranslationChangeEvent} from \"./translate.service\";\nimport {DefaultLangChangeEvent} from \"./translate.service\";\n\n@Directive({\n    selector: '[translate],[ngx-translate]'\n})\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\n    key: string;\n    lastParams: any;\n    currentParams: any;\n    onLangChangeSub: Subscription;\n    onDefaultLangChangeSub: Subscription;\n    onTranslationChangeSub: Subscription;\n\n    @Input() set translate(key: string) {\n        if(key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n\n    @Input() set translateParams(params: any) {\n        if(!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n\n    constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if(!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n                this.checkNodes(true, event.translations);\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n                this.checkNodes(true);\n            });\n        }\n    }\n\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n\n    checkNodes(forceUpdate = false, translations?: any) {\n        let nodes: NodeList = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if(!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for(let i = 0; i < nodes.length; ++i) {\n            let node: any = nodes[i];\n            if(node.nodeType === 3) { // node type 3 is a text node\n                let key: string;\n                if(this.key) {\n                    key = this.key;\n                    if(forceUpdate) {\n                        node.lastKey = null;\n                    }\n                } else {\n                    let content = this.getContent(node).trim();\n                    if(content.length) {\n                        // we want to use the content as a key, not the translation value\n                        if(content !== node.currentValue) {\n                            key = content;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = this.getContent(node);\n                        } else if(node.originalContent && forceUpdate) { // the content seems ok, but the lang has changed\n                            node.lastKey = null;\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    }\n\n    updateValue(key: string, node: any, translations: any) {\n        if(key) {\n            if(node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n\n            this.lastParams = this.currentParams;\n\n            let onTranslation = (res: string) => {\n                if(res !== key) {\n                    node.lastKey = key;\n                }\n                if(!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            };\n\n            if(isDefined(translations)) {\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if(typeof res.subscribe === \"function\") {\n                    res.subscribe(onTranslation);\n                } else {\n                    onTranslation(res);\n                }\n            } else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n\n    getContent(node: any): string {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n\n    setContent(node: any, content: string): void {\n        if(isDefined(node.textContent)) {\n            node.textContent = content;\n        } else {\n            node.data = content;\n        }\n    }\n\n    ngOnDestroy() {\n        if(this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n\n        if(this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n\n        if(this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n}\n","import {PipeTransform, Pipe, Injectable, EventEmitter, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {TranslateService, LangChangeEvent, TranslationChangeEvent, DefaultLangChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Injectable()\n@Pipe({\n    name: 'translate',\n    pure: false // required to update the value when the promise is resolved\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n    value: string = '';\n    lastKey: string;\n    lastParams: any[];\n    onTranslationChange: EventEmitter<TranslationChangeEvent>;\n    onLangChange: EventEmitter<LangChangeEvent>;\n    onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n\n    constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\n    }\n\n    updateValue(key: string, interpolateParams?: Object, translations?: any): void {\n        let onTranslation = (res: string) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        };\n        if(translations) {\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if(typeof res.subscribe === 'function') {\n                res.subscribe(onTranslation);\n            } else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n\n    transform(query: string, ...args: any[]): any {\n        if(!query || query.length === 0) {\n            return query;\n        }\n\n        // if we ask another time for the same key, return the last value\n        if(equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n\n        let interpolateParams: Object;\n        if(isDefined(args[0]) && args.length) {\n            if(typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                let validArgs: string = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                } catch(e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            } else if(typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n\n        // store the query, in case it changes\n        this.lastKey = query;\n\n        // store the params, in case they change\n        this.lastParams = args;\n\n        // set the value\n        this.updateValue(query, interpolateParams);\n\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n\n        // subscribe to onTranslationChange event, in case the translations change\n        if(!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n\n        return this.value;\n    }\n\n    /**\n     * Clean any existing subscription to change events\n     * @private\n     */\n    _dispose(): void {\n        if(typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if(typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if(typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._dispose();\n    }\n}\n","import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\nimport {TranslateLoader, TranslateFakeLoader} from \"./src/translate.loader\";\nimport {TranslateService} from \"./src/translate.service\";\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./src/missing-translation-handler\";\nimport {TranslateParser, TranslateDefaultParser} from \"./src/translate.parser\";\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./src/translate.compiler\";\nimport {TranslateDirective} from \"./src/translate.directive\";\nimport {TranslatePipe} from \"./src/translate.pipe\";\nimport {TranslateStore} from \"./src/translate.store\";\nimport {USE_STORE} from \"./src/translate.service\";\nimport {USE_DEFAULT_LANG} from \"./src/translate.service\";\n\nexport * from \"./src/translate.loader\";\nexport * from \"./src/translate.service\";\nexport * from \"./src/missing-translation-handler\";\nexport * from \"./src/translate.parser\";\nexport * from \"./src/translate.compiler\";\nexport * from \"./src/translate.directive\";\nexport * from \"./src/translate.pipe\";\n\nexport interface TranslateModuleConfig {\n    loader?: Provider;\n    compiler?: Provider;\n    parser?: Provider;\n    missingTranslationHandler?: Provider;\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n    isolate?: boolean;\n    useDefaultLang?: boolean;\n}\n\n@NgModule({\n    declarations: [\n        TranslatePipe,\n        TranslateDirective\n    ],\n    exports: [\n        TranslatePipe,\n        TranslateDirective\n    ]\n})\nexport class TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                TranslateStore,\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TranslatePipe } from '@ngx-translate/core';\n/**\n * This pipe extends the TranslatePipe.\n * It takes a string and an enum as inputs and returns the translation of the value from enum.\n */\nexport class ValueFromEnumPipe extends TranslatePipe implements PipeTransform {\n/**\n * Method returning the translated value.\n * @param {?} key\n * @param {?} enumeration\n * @return {?} list The array build from the object\n */\ntransform(key: string, enumeration: any): string {\n    const /** @type {?} */ value = enumeration[key];\n    return super.transform(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'mvValueFromEnum'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ValueFromEnumPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nValueFromEnumPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nValueFromEnumPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IteratorPipe } from './pipes/iterator/iterator.pipe';\nimport { ValueFromEnumPipe } from './pipes/value-from-enum/value-from-enum.pipe';\n\nexport {AddressDetails} from './types/address/address-details.type';\nexport {Address} from './types/address/address.type';\nexport class ComponentesCommonModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    IteratorPipe,\n    ValueFromEnumPipe\n  ],\n  exports: [\n    IteratorPipe,\n    ValueFromEnumPipe\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ComponentesCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nComponentesCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nComponentesCommonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { } from '@types/googlemaps';\nimport { PhoneInputDirective } from './directives/phone-input/phone-input.directive';\nimport { AddressInputDirective } from './directives/address-input/address-input.directive';\nimport { ErrorDisplayDirective } from './directives/error-display/error-display.directive';\n\nexport {ɵa,ɵb,ComponentesCommonModule,AddressDetails,Address} from 'mv-common-components';\nexport class ComponentesAngularModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    PhoneInputDirective,\n    AddressInputDirective,\n    ErrorDisplayDirective,\n  ],\n  exports: [\n    PhoneInputDirective,\n    AddressInputDirective,\n    ErrorDisplayDirective,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ComponentesAngularModule_tsickle_Closure_declarations() {\n/** @type {?} */\nComponentesAngularModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nComponentesAngularModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["PhoneNumberUtil","libPhoneNumber.PhoneNumberUtil","PhoneNumberFormat","libPhoneNumber.PhoneNumberFormat","PhoneInputDirective","element","renderer","this","phoneUtil","getInstance","propagateChange","_","prototype","input","value","formatNumber","val","formattedNumber","number","parse","national","format","NATIONAL","international","E164","e","setProperty","nativeElement","writeValue","registerOnChange","fn","registerOnTouched","decorators","type","Directive","args","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ctorParameters","ElementRef","Renderer2","propDecorators","HostListener","AddressInputDirective","ngZone","_this","autocomplete","google","maps","places","Autocomplete","types","addListener","run","selectAddress","Object","defineProperty","set","newAddress","_address","formattedAddress","onChange","place","getPlace","addressValue","addressDetails","_d","_e","address_components","length","component","streetNumber","long_name","route","postalCode","city","country","latitude","geometry","location","lat","longitude","lng","formatted_address","googlePlaceId","place_id","address","NgZone","ErrorDisplayDirective","templateRef","viewContainer","controlContainer","hasView","target","ngOnInit","subscription","control","get","valueChanges","subscribe","toggleVisibility","ngOnDestroy","unsubscribe","valid","clear","updateErrorList","error","errors","createEmbeddedView","$implicit","toUpperCase","controls","TemplateRef","ViewContainerRef","ControlContainer","mvErrorDisplay","Input","IteratorPipe","_super","__extends","transform","object","Observable","call","list","key","push","AsyncPipe","Pipe","name","__window","window","__self","self","WorkerGlobalScope","_root","global","root_1$1","Error","x","Array","isArray","tryCatchTarget","tryCatcher$1","apply","arguments","errorObject_1","errorObject","tryCatcher","UnsubscriptionError","err","map","i","toString","join","stack","message","flattenUnsubscriptionErrors$1","reduce","errs","concat","UnsubscriptionError_1","Subscription","closed","_parent","_parents","_subscriptions","_unsubscribe","empty","hasErrors","index","len","remove","isFunction_1","isFunction","tryCatch_1","tryCatch","flattenUnsubscriptionErrors","isArray_1","sub","isObject_1","isObject","add","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","parent","next","complete","Symbol","root_1","root","exports","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","SafeSubscriber","rxSubscriber_1","create","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2$1","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","nextOrObserver","Subscriber_1","getSymbolObservable","$$observable","observable","pipeFromArray$1","fns","prev","noop_1","noop","_i","pipeFromArray","Observable$$1","_isScalar","_subscribe","lift","operator","source","sink","toSubscriber_1","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","pipe","operations","pipe_1","toPromise","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","SubjectSubscriber_1","Subject","hasError","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","copy","slice","SubjectSubscription_1","asObservable","Observable_1","Subject_2","refCount_2","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","refCount_1","ConnectableObservable_2","connectableProto","connectableObservableDescriptor","writable","Subject_1","multicast_2","subjectOrSubjectFactory","MulticastOperator","ConnectableObservable_1","shareSubjectFactory","share_2","multicast_1","multicast","map_2","project","thisArg","TypeError","MapOperator","MapSubscriber","count","result","ScalarObservable","scheduler","dispatch","state","done","schedule","EmptyObservable","arg","ArrayObservable","array","of","isScheduler_1","isScheduler","pop","ScalarObservable_1","EmptyObservable_1","then","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","$$iterator","InnerSubscriber","outerValue","outerIndex","notifyNext","notifyError","notifyComplete","outerSubscriber","InnerSubscriber_1","isArrayLike_1","isArrayLike","isPromise_1","isPromise","setTimeout","iterator_1","item","obs","msg","OuterSubscriber","innerValue","innerIndex","innerSub","mergeMap_2$1","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","observer","MergeMapSubscriber","MergeMapOperator_1$1","hasCompleted","buffer","active","_tryNext","_innerSub","ish","subscribeToResult_1","subscribeToResult","_notifyResultSelector","shift","OuterSubscriber_1","mergeMap_1","mergeMap","identity_1","identity","observables","last","mergeAll_1","mergeAll","ArrayObservable_1","merge_4","merge_1","merge","switchMap_2","SwitchMapOperator","SwitchMapSubscriber","innerSubscription","_tryNotifyNext","scan_2","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","ArgumentOutOfRangeError","takeLast_2","TakeLastOperator","total","ArgumentOutOfRangeError_1","TakeLastSubscriber","ring","idx","defaultIfEmpty_2","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","scan_1","scan","takeLast_1","takeLast","defaultIfEmpty_1","defaultIfEmpty","acc","toArrayReducer","arr","toArray_2","reduce_1","take_2","TakeOperator","TakeSubscriber","TranslateLoader","TranslateFakeLoader","getTranslation","lang","__decorate","Injectable","Subscriber_2","dispatchNext","dispatchError","PromiseObservable","promise","IteratorObservable_2","IteratorObservable","obj","StringIterator","undefined","ArrayIterator","getIterator","return","str","charAt","o","isNaN","isFinite","valueAsNumber","Math","floor","abs","maxSafeInteger","toLength","pow","ArrayLikeObservable","arrayLike","Notification","kind","hasValue","observe","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn_2","delay","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","Notification_1","ObserveOnSubscriber_1","FromObservable","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","mergeMap_2","MergeMapOperator_1","from_1","from","concatAll_1","concatAll","of_1","concat_3","concat_1","MissingTranslationHandler","FakeMissingTranslationHandler","handle","params","TranslateCompiler","TranslateFakeCompiler","compile","compileTranslations","translations","equals","o1","o2","keySet","t1","isDefined","isObject$1","TranslateParser","TranslateDefaultParser","templateMatcher","interpolate","expr","interpolateString","interpolateFunction","getValue","split","replace","substring","b","r","TranslateStore","currentLang","defaultLang","langs","onTranslationChange","EventEmitter","onLangChange","onDefaultLangChange","USE_STORE","InjectionToken","USE_DEFAULT_LANG","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_langs","_translations","_translationRequests","_defaultLang","_currentLang","setDefaultLang","retrieveTranslations","take","res","changeDefaultLang","getDefaultLang","use","changeLang","loadingTranslations","share","updateLangs","setTranslation","shouldMerge","mergeDeep","output","assign","_b","_c","emit","getLangs","addLangs","getParsedResult","interpolateParams","key_1","k","mergedObs","key_2","toArray","translateService","onComplete","onError","stream","switchMap","event","instant","obj_1","reloadLang","resetLang","getBrowserLang","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","__param","Inject","__metadata","Boolean","TranslateDirective","_ref","onTranslationChangeSub","checkNodes","onLangChangeSub","onDefaultLangChangeSub","currentParams","ngAfterViewChecked","forceUpdate","nodes","childNodes","setContent","node","nodeType","lastKey","content","getContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ChangeDetectorRef","TranslatePipe","translate","query","validArgs","JSON","SyntaxError","_dispose","pure","TranslateModule_1","TranslateModule","forRoot","ngModule","loader","useClass","useValue","forChild","NgModule","declarations","ValueFromEnumPipe","enumeration","ComponentesCommonModule","imports","CommonModule","ComponentesAngularModule"],"mappings":"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"}

{"version":3,"file":"common-components.umd.min.js","sources":["~/common-components/src/componentes/pipes/iterator/iterator.pipe.ts","../../../node_modules/src/util/root.ts","../../../node_modules/src/util/isFunction.ts","../../../node_modules/src/util/isArray.ts","../../../node_modules/src/util/isObject.ts","../../../node_modules/src/util/tryCatch.ts","../../../node_modules/src/util/errorObject.ts","../../../node_modules/src/util/UnsubscriptionError.ts","../../../node_modules/src/Subscription.ts","../../../node_modules/src/Observer.ts","../../../node_modules/src/symbol/rxSubscriber.ts","../../../node_modules/src/Subscriber.ts","../../../node_modules/src/util/toSubscriber.ts","../../../node_modules/src/symbol/observable.ts","../../../node_modules/src/util/noop.ts","../../../node_modules/src/util/pipe.ts","../../../node_modules/src/Observable.ts","../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../node_modules/src/SubjectSubscription.ts","../../../node_modules/src/Subject.ts","../../../node_modules/src/operators/refCount.ts","../../../node_modules/src/observable/ConnectableObservable.ts","../../../node_modules/src/operators/multicast.ts","../../../node_modules/src/operators/share.ts","../../../node_modules/src/operators/map.ts","../../../node_modules/src/observable/ScalarObservable.ts","../../../node_modules/src/observable/EmptyObservable.ts","../../../node_modules/src/util/isScheduler.ts","../../../node_modules/src/observable/ArrayObservable.ts","../../../node_modules/src/util/isArrayLike.ts","../../../node_modules/src/util/isPromise.ts","../../../node_modules/src/symbol/iterator.ts","../../../node_modules/src/InnerSubscriber.ts","../../../node_modules/src/util/subscribeToResult.ts","../../../node_modules/src/OuterSubscriber.ts","../../../node_modules/src/operators/mergeMap.ts","../../../node_modules/src/util/identity.ts","../../../node_modules/src/operators/mergeAll.ts","../../../node_modules/src/observable/merge.ts","../../../node_modules/src/operators/merge.ts","../../../node_modules/src/operators/switchMap.ts","../../../node_modules/src/operators/scan.ts","../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/src/operators/takeLast.ts","../../../node_modules/src/operators/defaultIfEmpty.ts","../../../node_modules/src/operators/reduce.ts","../../../node_modules/src/operators/toArray.ts","../../../node_modules/src/operators/take.ts","../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.loader.ts","../../../node_modules/src/observable/of.ts","../../../node_modules/src/observable/PromiseObservable.ts","../../../node_modules/src/observable/IteratorObservable.ts","../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../node_modules/src/Notification.ts","../../../node_modules/src/operators/observeOn.ts","../../../node_modules/src/observable/FromObservable.ts","../../../node_modules/src/observable/from.ts","../../../node_modules/src/operators/concatAll.ts","../../../node_modules/src/observable/concat.ts","../../../node_modules/src/operators/concat.ts","../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/missing-translation-handler.ts","../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.compiler.ts","../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/util.ts","../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.parser.ts","../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.store.ts","../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.service.ts","../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.directive.ts","../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/src/translate.pipe.ts","../../../node_modules/@ngx-translate/core/@ngx-translate/~/@ngx-translate/core/index.ts","~/common-components/src/componentes/pipes/value-from-enum/value-from-enum.pipe.ts","~/common-components/src/componentes/componentes.module.ts"],"sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { AsyncPipe } from '@angular/common';\n/**\n * This pipe extends the AsyncPipe.\n * It takes an object, an enum or an observable as an input and returns an array.\n * The array is a list of the different objects in case of an observable.\n * The array is a list of objects {key: key, value: value} in case of an object or an enum.\n */\nexport class IteratorPipe extends AsyncPipe implements PipeTransform {\n/**\n * Method returning the array from in object\n * @param {?} object the object to transform\n * \n * @return {?} list The array build from the object\n */\ntransform(object: any): any {\n    if (object instanceof Observable) {\n      return super.transform(object);\n    }\n    const /** @type {?} */ list = [];\n    // tslint:disable-next-line:forin\n    for (const /** @type {?} */ key in object) {\n      list.push({ key: key, value: object[key] });\n    }\n    return list;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'mvIterator'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction IteratorPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nIteratorPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIteratorPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { merge as mergeStatic } from '../observable/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import {Observable} from \"rxjs/Observable\";\nimport {Injectable} from \"@angular/core\";\nimport {of} from \"rxjs/observable/of\";\n\nexport abstract class TranslateLoader {\n    abstract getTranslation(lang: string): Observable<any>;\n}\n\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n@Injectable()\nexport class TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang: string): Observable<any> {\n        return of({});\n    }\n}\n","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import {TranslateService} from \"./translate.service\";\nimport {Injectable} from \"@angular/core\";\n\nexport interface MissingTranslationHandlerParams {\n    /**\n     * the key that's missing in translation files\n     *\n     * @type {string}\n     */\n    key: string;\n\n    /**\n     * an instance of the service that was unable to translate the key.\n     *\n     * @type {TranslateService}\n     */\n    translateService: TranslateService;\n\n    /**\n     * interpolation params that were passed along for translating the given key.\n     *\n     * @type {Object}\n     */\n    interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n    /**\n     * A function that handles missing translations.\n     *\n     * @abstract\n     * @param {MissingTranslationHandlerParams} params context for resolving a missing translation\n     * @returns {any} a value or an observable\n     * If it returns a value, then this value is used.\n     * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n     * If it doesn't return then the key will be used as a value\n     */\n    abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n    handle(params: MissingTranslationHandlerParams): string {\n        return params.key;\n    }\n}\n","import {Injectable} from \"@angular/core\";\n\nexport abstract class TranslateCompiler {\n    abstract compile(value: string, lang: string): string | Function;\n    abstract compileTranslations(translations: any, lang: string): any;\n}\n\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n@Injectable()\nexport class TranslateFakeCompiler extends TranslateCompiler {\n    compile(value: string, lang: string): string | Function {\n        return value;\n    }\n\n    compileTranslations(translations: any, lang: string): any {\n        return translations;\n    }\n}\n","/* tslint:disable */\n/**\n * @name equals\n *\n * @description\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {*} o1 Object or value to compare.\n * @param {*} o2 Object or value to compare.\n * @returns {boolean} True if arguments are equal.\n */\nexport function equals(o1: any, o2: any): boolean {\n    if (o1 === o2) return true;\n    if (o1 === null || o2 === null) return false;\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n    let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2)) return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key])) return false;\n                }\n                return true;\n            }\n        } else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/* tslint:enable */\n\nexport function isDefined(value: any): boolean {\n    return typeof value !== 'undefined' && value !== null;\n}\n\nexport function isObject(item: any): boolean {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target: any, source: any): any {\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((key: any) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                } else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            } else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n","import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n    /**\n     * Interpolates a string to replace parameters\n     * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n     * @param expr\n     * @param params\n     * @returns {string}\n     */\n    abstract interpolate(expr: string | Function, params?: any): string;\n\n    /**\n     * Gets a value from an object by composed key\n     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n     * @param target\n     * @param key\n     * @returns {string}\n     */\n    abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n    templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n    public interpolate(expr: string | Function, params?: any): string {\n        let result: string;\n\n        if(typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        } else if(typeof expr === 'function') {\n            result =  this.interpolateFunction(expr, params);\n        } else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = expr as string;\n        }\n\n        return result;\n    }\n\n    getValue(target: any, key: string): any {\n        let keys = key.split('.');\n        key = '';\n        do {\n            key += keys.shift();\n            if(isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            } else if(!keys.length) {\n                target = undefined;\n            } else {\n                key += '.';\n            }\n        } while(keys.length);\n\n        return target;\n    }\n\n    private interpolateFunction(fn: Function, params?: any) {\n        return fn(params);\n    }\n\n    private interpolateString(expr: string, params?: any) {\n        if (!params) {\n            return expr;\n        }\n\n        return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n            let r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        });\n    }\n}\n","import {EventEmitter} from \"@angular/core\";\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\n\nexport class TranslateStore {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    public defaultLang: string;\n\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    public currentLang: string = this.defaultLang;\n\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n    public translations: any = {};\n\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n    public langs: Array<string> = [];\n\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n    public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n    public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n    public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n","import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Observer} from \"rxjs/Observer\";\nimport {concat} from \"rxjs/operators/concat\";\nimport {share} from \"rxjs/operators/share\";\nimport {map} from \"rxjs/operators/map\";\nimport {merge} from \"rxjs/operators/merge\";\nimport {switchMap} from \"rxjs/operators/switchMap\";\nimport {toArray} from \"rxjs/operators/toArray\";\nimport {take} from \"rxjs/operators/take\";\nimport {of} from \"rxjs/observable/of\";\nimport {\n  MissingTranslationHandler,\n  MissingTranslationHandlerParams\n} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n    translations: any;\n    lang: string;\n}\n\nexport interface LangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\ndeclare interface Window {\n    navigator: any;\n}\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n    private loadingTranslations: Observable<any>;\n    private pending: boolean = false;\n    private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n    private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n    private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n    private _defaultLang: string;\n    private _currentLang: string;\n    private _langs: Array<string> = [];\n    private _translations: any = {};\n    private _translationRequests: any  = {};\n\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n    get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n    get onLangChange(): EventEmitter<LangChangeEvent> {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    get defaultLang(): string {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n\n    set defaultLang(defaultLang: string) {\n        if(this.isolate) {\n            this._defaultLang = defaultLang;\n        } else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    get currentLang(): string {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n\n    set currentLang(currentLang: string) {\n        if(this.isolate) {\n            this._currentLang = currentLang;\n        } else {\n            this.store.currentLang = currentLang;\n        }\n    }\n\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n    get langs(): string[] {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n\n    set langs(langs: string[]) {\n        if(this.isolate) {\n            this._langs = langs;\n        } else {\n            this.store.langs = langs;\n        }\n    }\n\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n    get translations(): any {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n\n    set translations(translations: any) {\n        if(this.isolate) {\n            this._translations = translations;\n        } else {\n            this.store.translations = translations;\n        }\n    }\n\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param isolate whether this service should use the store or not\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     */\n    constructor(public store: TranslateStore,\n                public currentLoader: TranslateLoader,\n                public compiler: TranslateCompiler,\n                public parser: TranslateParser,\n                public missingTranslationHandler: MissingTranslationHandler,\n                @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n                @Inject(USE_STORE) private isolate: boolean = false) {\n    }\n\n    /**\n     * Sets the default language to use as a fallback\n     * @param lang\n     */\n    public setDefaultLang(lang: string): void {\n        if(lang === this.defaultLang) {\n            return;\n        }\n\n        let pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if(!this.defaultLang) {\n                this.defaultLang = lang;\n            }\n\n            pending.pipe(take(1))\n                .subscribe((res: any) => {\n                    this.changeDefaultLang(lang);\n                });\n        } else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n\n    /**\n     * Gets the default language used\n     * @returns string\n     */\n    public getDefaultLang(): string {\n        return this.defaultLang;\n    }\n\n    /**\n     * Changes the lang currently used\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    public use(lang: string): Observable<any> {\n        // don't change the language if the language given is already selected\n        if(lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n\n        let pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if(!this.currentLang) {\n                this.currentLang = lang;\n            }\n\n            pending.pipe(take(1))\n                .subscribe((res: any) => {\n                    this.changeLang(lang);\n                });\n\n            return pending;\n        } else { // we have this language, return an Observable\n            this.changeLang(lang);\n\n            return of(this.translations[lang]);\n        }\n    }\n\n    /**\n     * Retrieves the given translations\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    private retrieveTranslations(lang: string): Observable<any> {\n        let pending: Observable<any>;\n\n        // if this language is unavailable, ask for it\n        if(typeof this.translations[lang] === \"undefined\") {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n\n        return pending;\n    }\n\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    public getTranslation(lang: string): Observable<any> {\n        this.pending = true;\n        this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n\n        this.loadingTranslations.pipe(take(1))\n          .subscribe((res: Object) => {\n                this.translations[lang] = this.compiler.compileTranslations(res, lang);\n                this.updateLangs();\n                this.pending = false;\n            }, (err: any) => {\n                this.pending = false;\n            });\n\n        return this.loadingTranslations;\n    }\n\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param lang\n     * @param translations\n     * @param shouldMerge\n     */\n    public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if(shouldMerge && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        } else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Returns an array of currently available langs\n     * @returns {any}\n     */\n    public getLangs(): Array<string> {\n        return this.langs;\n    }\n\n    /**\n     * @param langs\n     * Add available langs\n     */\n    public addLangs(langs: Array<string>): void {\n        langs.forEach((lang: string) => {\n            if(this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        });\n    }\n\n    /**\n     * Update the list of available langs\n     */\n    private updateLangs(): void {\n        this.addLangs(Object.keys(this.translations));\n    }\n\n    /**\n     * Returns the parsed result of the translations\n     * @param translations\n     * @param key\n     * @param interpolateParams\n     * @returns {any}\n     */\n    public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n        let res: string | Observable<string>;\n\n        if(key instanceof Array) {\n            let result: any = {},\n                observables: boolean = false;\n            for(let k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if(typeof result[k].subscribe === \"function\") {\n                    observables = true;\n                }\n            }\n            if(observables) {\n                let mergedObs: Observable<string>;\n                for(let k of key) {\n                    let obs = typeof result[k].subscribe === \"function\" ? result[k] : of(result[k] as string);\n                    if(typeof mergedObs === \"undefined\") {\n                        mergedObs = obs;\n                    } else {\n                        mergedObs = mergedObs.pipe(merge(obs));\n                    }\n                }\n                return mergedObs.pipe(\n                  toArray(),\n                  map((arr: Array<string>) => {\n                    let obj: any = {};\n                    arr.forEach((value: string, index: number) => {\n                      obj[key[index]] = value;\n                    });\n                    return obj;\n                  })\n                );\n            }\n            return result;\n        }\n\n        if(translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\") {\n            let params: MissingTranslationHandlerParams = {key, translateService: this};\n            if(typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n\n        return typeof res !== \"undefined\" ? res : key;\n    }\n\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param key\n     * @param interpolateParams\n     * @returns {any} the translated key, or an object of translated keys\n     */\n    public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if(this.pending) {\n            return Observable.create((observer: Observer<string>) => {\n                let onComplete = (res: string) => {\n                    observer.next(res);\n                    observer.complete();\n                };\n                let onError = (err: any) => {\n                    observer.error(err);\n                };\n                this.loadingTranslations.subscribe((res: any) => {\n                    res = this.getParsedResult(this.compiler.compileTranslations(res, this.currentLang), key, interpolateParams);\n                    if(typeof res.subscribe === \"function\") {\n                        res.subscribe(onComplete, onError);\n                    } else {\n                        onComplete(res);\n                    }\n                }, onError);\n            });\n        } else {\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            if(typeof res.subscribe === \"function\") {\n                return res;\n            } else {\n                return of(res);\n            }\n        }\n    }\n\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param key\n     * @param interpolateParams\n     * @returns {any} A stream of the translated key, or an object of translated keys\n     */\n    public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        return this\n          .get(key, interpolateParams)\n          .pipe(\n            concat(this.onLangChange.pipe(\n              switchMap((event: LangChangeEvent) => {\n                const res = this.getParsedResult(event.translations, key, interpolateParams);\n                if (typeof res.subscribe === \"function\") {\n                  return res;\n                } else {\n                  return of(res);\n                }\n              })\n            ))\n          );\n    }\n\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param key\n     * @param interpolateParams\n     * @returns {string}\n     */\n    public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if(typeof res.subscribe !== \"undefined\") {\n            if(key instanceof Array) {\n                let obj: any = {};\n                key.forEach((value: string, index: number) => {\n                    obj[key[index]] = key[index];\n                });\n                return obj;\n            }\n            return key;\n        } else {\n            return res;\n        }\n    }\n\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param key\n     * @param value\n     * @param lang\n     */\n    public set(key: string, value: string, lang: string = this.currentLang): void {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Changes the current lang\n     * @param lang\n     */\n    private changeLang(lang: string): void {\n        this.currentLang = lang;\n        this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n        // if there is no default lang, use the one that we just set\n        if(!this.defaultLang) {\n            this.changeDefaultLang(lang);\n        }\n    }\n\n    /**\n     * Changes the default lang\n     * @param lang\n     */\n    private changeDefaultLang(lang: string): void {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Allows to reload the lang file from the file\n     * @param lang\n     * @returns {Observable<any>}\n     */\n    public reloadLang(lang: string): Observable<any> {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n\n    /**\n     * Deletes inner translation\n     * @param lang\n     */\n    public resetLang(lang: string): void {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     *\n     * @returns string\n     */\n    public getBrowserLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        if(browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n\n        if(browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n\n        return browserLang;\n    }\n\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     *\n     * @returns string\n     */\n    public getBrowserCultureLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        return browserCultureLang;\n    }\n}\n","import {Directive, ElementRef, AfterViewChecked, Input, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {equals, isDefined} from './util';\nimport {TranslateService, LangChangeEvent} from './translate.service';\nimport {TranslationChangeEvent} from \"./translate.service\";\nimport {DefaultLangChangeEvent} from \"./translate.service\";\n\n@Directive({\n    selector: '[translate],[ngx-translate]'\n})\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\n    key: string;\n    lastParams: any;\n    currentParams: any;\n    onLangChangeSub: Subscription;\n    onDefaultLangChangeSub: Subscription;\n    onTranslationChangeSub: Subscription;\n\n    @Input() set translate(key: string) {\n        if(key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n\n    @Input() set translateParams(params: any) {\n        if(!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n\n    constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if(!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n                this.checkNodes(true, event.translations);\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n                this.checkNodes(true);\n            });\n        }\n    }\n\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n\n    checkNodes(forceUpdate = false, translations?: any) {\n        let nodes: NodeList = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if(!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for(let i = 0; i < nodes.length; ++i) {\n            let node: any = nodes[i];\n            if(node.nodeType === 3) { // node type 3 is a text node\n                let key: string;\n                if(this.key) {\n                    key = this.key;\n                    if(forceUpdate) {\n                        node.lastKey = null;\n                    }\n                } else {\n                    let content = this.getContent(node).trim();\n                    if(content.length) {\n                        // we want to use the content as a key, not the translation value\n                        if(content !== node.currentValue) {\n                            key = content;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = this.getContent(node);\n                        } else if(node.originalContent && forceUpdate) { // the content seems ok, but the lang has changed\n                            node.lastKey = null;\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    }\n\n    updateValue(key: string, node: any, translations: any) {\n        if(key) {\n            if(node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n\n            this.lastParams = this.currentParams;\n\n            let onTranslation = (res: string) => {\n                if(res !== key) {\n                    node.lastKey = key;\n                }\n                if(!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            };\n\n            if(isDefined(translations)) {\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if(typeof res.subscribe === \"function\") {\n                    res.subscribe(onTranslation);\n                } else {\n                    onTranslation(res);\n                }\n            } else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n\n    getContent(node: any): string {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n\n    setContent(node: any, content: string): void {\n        if(isDefined(node.textContent)) {\n            node.textContent = content;\n        } else {\n            node.data = content;\n        }\n    }\n\n    ngOnDestroy() {\n        if(this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n\n        if(this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n\n        if(this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n}\n","import {PipeTransform, Pipe, Injectable, EventEmitter, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {TranslateService, LangChangeEvent, TranslationChangeEvent, DefaultLangChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Injectable()\n@Pipe({\n    name: 'translate',\n    pure: false // required to update the value when the promise is resolved\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n    value: string = '';\n    lastKey: string;\n    lastParams: any[];\n    onTranslationChange: EventEmitter<TranslationChangeEvent>;\n    onLangChange: EventEmitter<LangChangeEvent>;\n    onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n\n    constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\n    }\n\n    updateValue(key: string, interpolateParams?: Object, translations?: any): void {\n        let onTranslation = (res: string) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        };\n        if(translations) {\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if(typeof res.subscribe === 'function') {\n                res.subscribe(onTranslation);\n            } else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n\n    transform(query: string, ...args: any[]): any {\n        if(!query || query.length === 0) {\n            return query;\n        }\n\n        // if we ask another time for the same key, return the last value\n        if(equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n\n        let interpolateParams: Object;\n        if(isDefined(args[0]) && args.length) {\n            if(typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                let validArgs: string = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                } catch(e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            } else if(typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n\n        // store the query, in case it changes\n        this.lastKey = query;\n\n        // store the params, in case they change\n        this.lastParams = args;\n\n        // set the value\n        this.updateValue(query, interpolateParams);\n\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n\n        // subscribe to onTranslationChange event, in case the translations change\n        if(!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n\n        return this.value;\n    }\n\n    /**\n     * Clean any existing subscription to change events\n     * @private\n     */\n    _dispose(): void {\n        if(typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if(typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if(typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._dispose();\n    }\n}\n","import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\nimport {TranslateLoader, TranslateFakeLoader} from \"./src/translate.loader\";\nimport {TranslateService} from \"./src/translate.service\";\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./src/missing-translation-handler\";\nimport {TranslateParser, TranslateDefaultParser} from \"./src/translate.parser\";\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./src/translate.compiler\";\nimport {TranslateDirective} from \"./src/translate.directive\";\nimport {TranslatePipe} from \"./src/translate.pipe\";\nimport {TranslateStore} from \"./src/translate.store\";\nimport {USE_STORE} from \"./src/translate.service\";\nimport {USE_DEFAULT_LANG} from \"./src/translate.service\";\n\nexport * from \"./src/translate.loader\";\nexport * from \"./src/translate.service\";\nexport * from \"./src/missing-translation-handler\";\nexport * from \"./src/translate.parser\";\nexport * from \"./src/translate.compiler\";\nexport * from \"./src/translate.directive\";\nexport * from \"./src/translate.pipe\";\n\nexport interface TranslateModuleConfig {\n    loader?: Provider;\n    compiler?: Provider;\n    parser?: Provider;\n    missingTranslationHandler?: Provider;\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n    isolate?: boolean;\n    useDefaultLang?: boolean;\n}\n\n@NgModule({\n    declarations: [\n        TranslatePipe,\n        TranslateDirective\n    ],\n    exports: [\n        TranslatePipe,\n        TranslateDirective\n    ]\n})\nexport class TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                TranslateStore,\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TranslatePipe } from '@ngx-translate/core';\n/**\n * This pipe extends the TranslatePipe.\n * It takes a string and an enum as inputs and returns the translation of the value from enum.\n */\nexport class ValueFromEnumPipe extends TranslatePipe implements PipeTransform {\n/**\n * Method returning the translated value.\n * @param {?} key\n * @param {?} enumeration\n * @return {?} list The array build from the object\n */\ntransform(key: string, enumeration: any): string {\n    const /** @type {?} */ value = enumeration[key];\n    return super.transform(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'mvValueFromEnum'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ValueFromEnumPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nValueFromEnumPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nValueFromEnumPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IteratorPipe } from './pipes/iterator/iterator.pipe';\nimport { ValueFromEnumPipe } from './pipes/value-from-enum/value-from-enum.pipe';\n\nexport {AddressDetails} from './types/address/address-details.type';\nexport {Address} from './types/address/address.type';\nexport class ComponentesCommonModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    IteratorPipe,\n    ValueFromEnumPipe\n  ],\n  exports: [\n    IteratorPipe,\n    ValueFromEnumPipe\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ComponentesCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nComponentesCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nComponentesCommonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["IteratorPipe","_super","__extends","prototype","transform","object","Observable","call","this","list","key","push","value","AsyncPipe","decorators","type","Pipe","args","name","ctorParameters","__window","window","__self","self","WorkerGlobalScope","_root","global","root_1$1","Error","x","Array","isArray","length","tryCatchTarget","e","tryCatcher$1","apply","arguments","errorObject_1","errorObject","fn","tryCatcher","UnsubscriptionError","errors","err","map","i","toString","join","stack","message","flattenUnsubscriptionErrors$1","reduce","errs","concat","UnsubscriptionError_1","Subscription","unsubscribe","closed","_parent","_parents","_subscriptions","_unsubscribe","empty","hasErrors","index","len","remove","isFunction_1","isFunction","tryCatch_1","tryCatch","flattenUnsubscriptionErrors","isArray_1","sub","isObject_1","isObject","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","parent","next","error","complete","Symbol","root_1","root","exports","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","SafeSubscriber","rxSubscriber_1","create","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2$1","_parentSubscriber","observerOrNext","context","Object","bind","_context","__tryOrSetError","__tryOrUnsub","_this","wrappedComplete","nextOrObserver","Subscriber_1","getSymbolObservable","$$observable","observable","pipeFromArray$1","fns","input","prev","noop_1","noop","_i","pipeFromArray","Observable$$1","subscribe","_isScalar","_subscribe","lift","operator","source","sink","toSubscriber_1","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","pipe","operations","pipe_1","toPromise","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","SubjectSubscriber_1","Subject","hasError","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","copy","slice","SubjectSubscription_1","asObservable","Observable_1","Subject_2","refCount_2","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","refCount_1","ConnectableObservable_2","connectableProto","connectableObservableDescriptor","writable","Subject_1","multicast_2","subjectOrSubjectFactory","selector","MulticastOperator","ConnectableObservable_1","shareSubjectFactory","share_2","multicast_1","multicast","map_2","project","thisArg","TypeError","MapOperator","MapSubscriber","count","result","ScalarObservable","scheduler","dispatch","state","done","schedule","EmptyObservable","arg","ArrayObservable","array","of","isScheduler_1","isScheduler","pop","ScalarObservable_1","EmptyObservable_1","then","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","$$iterator","InnerSubscriber","outerValue","outerIndex","notifyNext","notifyError","notifyComplete","outerSubscriber","InnerSubscriber_1","isArrayLike_1","isArrayLike","isPromise_1","isPromise","setTimeout","iterator_1","item","obs","msg","OuterSubscriber","innerValue","innerIndex","innerSub","mergeMap_2$1","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","observer","MergeMapSubscriber","MergeMapOperator_1$1","hasCompleted","buffer","active","_tryNext","_innerSub","ish","subscribeToResult_1","subscribeToResult","_notifyResultSelector","shift","OuterSubscriber_1","mergeMap_1","mergeMap","identity_1","identity","observables","last","mergeAll_1","mergeAll","ArrayObservable_1","merge_4","merge_1","merge","switchMap_2","SwitchMapOperator","SwitchMapSubscriber","innerSubscription","_tryNotifyNext","scan_2","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","defineProperty","get","set","ArgumentOutOfRangeError","takeLast_2","TakeLastOperator","total","ArgumentOutOfRangeError_1","TakeLastSubscriber","ring","idx","defaultIfEmpty_2","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","scan_1","scan","takeLast_1","takeLast","defaultIfEmpty_1","defaultIfEmpty","acc","toArrayReducer","arr","toArray_2","reduce_1","take_2","TakeOperator","TakeSubscriber","TranslateLoader","TranslateFakeLoader","getTranslation","lang","__decorate","Injectable","Subscriber_2","dispatchNext","dispatchError","PromiseObservable","promise","IteratorObservable_2","IteratorObservable","obj","StringIterator","undefined","ArrayIterator","getIterator","return","str","charAt","o","isNaN","isFinite","valueAsNumber","Math","floor","abs","maxSafeInteger","toLength","pow","ArrayLikeObservable","arrayLike","Notification","kind","hasValue","observe","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn_2","delay","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","Notification_1","ObserveOnSubscriber_1","FromObservable","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","mergeMap_2","MergeMapOperator_1","from_1","from","concatAll_1","concatAll","of_1","concat_3","concat_1","MissingTranslationHandler","FakeMissingTranslationHandler","handle","params","TranslateCompiler","TranslateFakeCompiler","compile","compileTranslations","translations","equals","o1","o2","keySet","t1","isDefined","isObject$1","TranslateParser","TranslateDefaultParser","templateMatcher","interpolate","expr","interpolateString","interpolateFunction","getValue","target","split","replace","substring","b","r","TranslateStore","currentLang","defaultLang","langs","onTranslationChange","EventEmitter","onLangChange","onDefaultLangChange","USE_STORE","InjectionToken","USE_DEFAULT_LANG","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_langs","_translations","_translationRequests","_defaultLang","_currentLang","setDefaultLang","retrieveTranslations","take","res","changeDefaultLang","getDefaultLang","use","changeLang","loadingTranslations","share","updateLangs","setTranslation","shouldMerge","mergeDeep","output","assign","_b","_c","emit","getLangs","addLangs","getParsedResult","interpolateParams","key_1","k","mergedObs","key_2","toArray","translateService","onComplete","onError","stream","switchMap","event","instant","obj_1","reloadLang","resetLang","getBrowserLang","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","__param","Inject","__metadata","Boolean","TranslateDirective","element","_ref","onTranslationChangeSub","checkNodes","onLangChangeSub","onDefaultLangChangeSub","currentParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","node","nodeType","lastKey","content","getContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ngOnDestroy","Input","Directive","ElementRef","ChangeDetectorRef","TranslatePipe","translate","query","validArgs","JSON","parse","SyntaxError","_dispose","pure","TranslateModule_1","TranslateModule","forRoot","ngModule","providers","loader","provide","useClass","useValue","forChild","NgModule","declarations","ValueFromEnumPipe","enumeration","ComponentesCommonModule","imports","CommonModule"],"mappings":"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"}
